function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _libElement = require("../lib/element");

var _libElement2 = _interopRequireDefault(_libElement);

describe("Element", function () {
  var element = undefined;

  beforeEach(function () {
    element = new _libElement2["default"]();
    spyOn(element, "setTooltip").andCallThrough();
    spyOn(element, "setBusy").andCallThrough();
  });
  afterEach(function () {
    element.dispose();
  });

  function validateSetTooltip(call, html) {
    expect(element.setTooltip.calls[call].args[0].innerHTML).toEqual(html);
  }

  it("sets a title properly", function () {
    element.update([{ title: "Hello" }], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>Current:</strong><div>Hello</div>");
  });
  it("escapes the given texts", function () {
    element.update([{ title: "<div>" }], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>Current:</strong><div>&lt;div&gt;</div>");
  });
  it("shows idle message when nothing is provided", function () {
    element.update([], []);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    validateSetTooltip(0, "Idle");
  });
  it("shows only history when current is not present", function () {
    element.update([], [{ title: "Yo", duration: "1m" }]);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    validateSetTooltip(0, "<strong>History:</strong><div>Yo (1m)</div>");
  });
  it("shows both history and current when both are present", function () {
    element.update([{ title: "Hey" }], [{ title: "Yo", duration: "1m" }]);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>History:</strong><div>Yo (1m)</div><strong>Current:</strong><div>Hey</div>");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FyY2hpZS8uYXRvbS9wYWNrYWdlcy9idXN5LXNpZ25hbC9zcGVjL2VsZW1lbnQtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzswQkFFb0IsZ0JBQWdCOzs7O0FBRXBDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBVztBQUM3QixNQUFJLE9BQU8sWUFBQSxDQUFDOztBQUVaLFlBQVUsQ0FBQyxZQUFXO0FBQ3BCLFdBQU8sR0FBRyw2QkFBYSxDQUFDO0FBQ3hCLFNBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDOUMsU0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztHQUM1QyxDQUFDLENBQUM7QUFDSCxXQUFTLENBQUMsWUFBVztBQUNuQixXQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7R0FDbkIsQ0FBQyxDQUFDOztBQUVILFdBQVMsa0JBQWtCLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRTtBQUN0RCxVQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUN4RTs7QUFFRCxJQUFFLENBQUMsdUJBQXVCLEVBQUUsWUFBVztBQUNyQyxXQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6QyxVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25ELHNCQUFrQixDQUFDLENBQUMsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO0dBQ3BFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFXO0FBQ3ZDLFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLFVBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsc0JBQWtCLENBQUMsQ0FBQyxFQUFFLGlEQUFpRCxDQUFDLENBQUM7R0FDMUUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQVc7QUFDM0QsV0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkIsVUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRCxzQkFBa0IsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDL0IsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQVc7QUFDOUQsV0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RCxVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELHNCQUFrQixDQUFDLENBQUMsRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDO0dBQ3RFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxzREFBc0QsRUFBRSxZQUFXO0FBQ3BFLFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEUsVUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxzQkFBa0IsQ0FDaEIsQ0FBQyxFQUNELG9GQUFvRixDQUNyRixDQUFDO0dBQ0gsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii9ob21lL2FyY2hpZS8uYXRvbS9wYWNrYWdlcy9idXN5LXNpZ25hbC9zcGVjL2VsZW1lbnQtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCBFbGVtZW50IGZyb20gXCIuLi9saWIvZWxlbWVudFwiO1xuXG5kZXNjcmliZShcIkVsZW1lbnRcIiwgZnVuY3Rpb24oKSB7XG4gIGxldCBlbGVtZW50O1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudCA9IG5ldyBFbGVtZW50KCk7XG4gICAgc3B5T24oZWxlbWVudCwgXCJzZXRUb29sdGlwXCIpLmFuZENhbGxUaHJvdWdoKCk7XG4gICAgc3B5T24oZWxlbWVudCwgXCJzZXRCdXN5XCIpLmFuZENhbGxUaHJvdWdoKCk7XG4gIH0pO1xuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC5kaXNwb3NlKCk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlU2V0VG9vbHRpcChjYWxsOiBudW1iZXIsIGh0bWw6IHN0cmluZykge1xuICAgIGV4cGVjdChlbGVtZW50LnNldFRvb2x0aXAuY2FsbHNbY2FsbF0uYXJnc1swXS5pbm5lckhUTUwpLnRvRXF1YWwoaHRtbCk7XG4gIH1cblxuICBpdChcInNldHMgYSB0aXRsZSBwcm9wZXJseVwiLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbeyB0aXRsZTogXCJIZWxsb1wiIH1dLCBbXSk7XG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0QnVzeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgodHJ1ZSk7XG4gICAgdmFsaWRhdGVTZXRUb29sdGlwKDAsIFwiPHN0cm9uZz5DdXJyZW50Ojwvc3Ryb25nPjxkaXY+SGVsbG88L2Rpdj5cIik7XG4gIH0pO1xuICBpdChcImVzY2FwZXMgdGhlIGdpdmVuIHRleHRzXCIsIGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQudXBkYXRlKFt7IHRpdGxlOiBcIjxkaXY+XCIgfV0sIFtdKTtcbiAgICBleHBlY3QoZWxlbWVudC5zZXRCdXN5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbiAgICB2YWxpZGF0ZVNldFRvb2x0aXAoMCwgXCI8c3Ryb25nPkN1cnJlbnQ6PC9zdHJvbmc+PGRpdj4mbHQ7ZGl2Jmd0OzwvZGl2PlwiKTtcbiAgfSk7XG4gIGl0KFwic2hvd3MgaWRsZSBtZXNzYWdlIHdoZW4gbm90aGluZyBpcyBwcm92aWRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbXSwgW10pO1xuICAgIGV4cGVjdChlbGVtZW50LnNldEJ1c3kpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGZhbHNlKTtcbiAgICB2YWxpZGF0ZVNldFRvb2x0aXAoMCwgXCJJZGxlXCIpO1xuICB9KTtcbiAgaXQoXCJzaG93cyBvbmx5IGhpc3Rvcnkgd2hlbiBjdXJyZW50IGlzIG5vdCBwcmVzZW50XCIsIGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQudXBkYXRlKFtdLCBbeyB0aXRsZTogXCJZb1wiLCBkdXJhdGlvbjogXCIxbVwiIH1dKTtcbiAgICBleHBlY3QoZWxlbWVudC5zZXRCdXN5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSk7XG4gICAgdmFsaWRhdGVTZXRUb29sdGlwKDAsIFwiPHN0cm9uZz5IaXN0b3J5Ojwvc3Ryb25nPjxkaXY+WW8gKDFtKTwvZGl2PlwiKTtcbiAgfSk7XG4gIGl0KFwic2hvd3MgYm90aCBoaXN0b3J5IGFuZCBjdXJyZW50IHdoZW4gYm90aCBhcmUgcHJlc2VudFwiLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbeyB0aXRsZTogXCJIZXlcIiB9XSwgW3sgdGl0bGU6IFwiWW9cIiwgZHVyYXRpb246IFwiMW1cIiB9XSk7XG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0QnVzeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgodHJ1ZSk7XG4gICAgdmFsaWRhdGVTZXRUb29sdGlwKFxuICAgICAgMCxcbiAgICAgIFwiPHN0cm9uZz5IaXN0b3J5Ojwvc3Ryb25nPjxkaXY+WW8gKDFtKTwvZGl2PjxzdHJvbmc+Q3VycmVudDo8L3N0cm9uZz48ZGl2PkhleTwvZGl2PlwiXG4gICAgKTtcbiAgfSk7XG59KTtcbiJdfQ==