Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.shouldTriggerLinter = shouldTriggerLinter;
exports.getEditorCursorScopes = getEditorCursorScopes;
exports.isPathIgnored = isPathIgnored;
exports.subscriptiveObserve = subscriptiveObserve;
exports.updateMessageKey = updateMessageKey;
exports.normalizeMessages = normalizeMessages;
exports.updateKeys = updateKeys;
exports.createKeyMessageMap = createKeyMessageMap;
exports.flagMessages = flagMessages;
exports.mergeArray = mergeArray;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashUniq = require('lodash/uniq');

var _lodashUniq2 = _interopRequireDefault(_lodashUniq);

var _atom = require('atom');

var $version = '__$sb_linter_version';
exports.$version = $version;
var $activated = '__$sb_linter_activated';
exports.$activated = $activated;
var $requestLatest = '__$sb_linter_request_latest';
exports.$requestLatest = $requestLatest;
var $requestLastReceived = '__$sb_linter_request_last_received';

exports.$requestLastReceived = $requestLastReceived;

function shouldTriggerLinter(linter, wasTriggeredOnChange, scopes) {
  if (wasTriggeredOnChange && !linter.lintsOnChange) {
    return false;
  }
  return scopes.some(function (scope) {
    return linter.grammarScopes.includes(scope);
  });
}

function getEditorCursorScopes(textEditor) {
  return (0, _lodashUniq2['default'])(textEditor.getCursors().reduce(function (scopes, cursor) {
    return scopes.concat(cursor.getScopeDescriptor().getScopesArray());
  }, ['*']));
}

var minimatch = undefined;

function isPathIgnored(filePath, ignoredGlob, ignoredVCS) {
  if (!filePath) {
    return true;
  }

  if (ignoredVCS) {
    var repository = null;
    var projectPaths = atom.project.getPaths();
    for (var i = 0, _length2 = projectPaths.length; i < _length2; ++i) {
      var projectPath = projectPaths[i];
      if (filePath.indexOf(projectPath) === 0) {
        repository = atom.project.getRepositories()[i];
        break;
      }
    }
    if (repository && repository.isPathIgnored(filePath)) {
      return true;
    }
  }
  var normalizedFilePath = process.platform === 'win32' ? filePath.replace(/\\/g, '/') : filePath;
  if (!minimatch) {
    minimatch = require('minimatch');
  }
  return minimatch(normalizedFilePath, ignoredGlob);
}

function subscriptiveObserve(object, eventName, callback) {
  var subscription = null;
  var eventSubscription = object.observe(eventName, function (props) {
    if (subscription) {
      subscription.dispose();
    }
    subscription = callback.call(this, props);
  });

  return new _atom.Disposable(function () {
    eventSubscription.dispose();
    if (subscription) {
      subscription.dispose();
    }
  });
}

function updateMessageKey(message) {
  var reference = message.reference;
  var location = message.location;

  message.key = ['$LINTER:' + message.linterName, '$LOCATION:' + location.file + '$' + location.position.start.row + '$' + location.position.start.column + '$' + location.position.end.row + '$' + location.position.end.column, reference ? '$REFERENCE:' + reference.file + '$' + (reference.position ? reference.position.row + '$' + reference.position.column : '') : '$REFERENCE:null', '$EXCERPT:' + message.excerpt, '$SEVERITY:' + message.severity, message.icon ? '$ICON:' + message.icon : '$ICON:null', message.url ? '$URL:' + message.url : '$URL:null', typeof message.description === 'string' ? '$DESCRIPTION:' + message.description : '$DESCRIPTION:null'].join('');
}

function normalizeMessages(linterName, messages) {
  for (var i = 0, _length3 = messages.length; i < _length3; ++i) {
    var message = messages[i];
    var reference = message.reference;

    if (Array.isArray(message.location.position)) {
      message.location.position = _atom.Range.fromObject(message.location.position);
    }
    if (reference && Array.isArray(reference.position)) {
      reference.position = _atom.Point.fromObject(reference.position);
    }
    if (message.solutions && message.solutions.length) {
      for (var j = 0, _length = message.solutions.length, solution = undefined; j < _length; j++) {
        solution = message.solutions[j];
        if (Array.isArray(solution.position)) {
          solution.position = _atom.Range.fromObject(solution.position);
        }
      }
    }
    message.version = 2;
    if (!message.linterName) {
      message.linterName = linterName;
    }
    updateMessageKey(message);
  }
}

// update the key of the given messages

function updateKeys(messages) {
  messages.forEach(function (m) {
    updateMessageKey(m);
  });
}

// create a map from keys to messages

function createKeyMessageMap(messages) {
  var keyMessageMap = new Map();
  for (var i = 0, _length4 = messages.length; i < _length4; ++i) {
    var message = messages[i];
    keyMessageMap.set(message.key, message);
  }
  return keyMessageMap;
}

// This fast function returns the new messages and old messages by comparing their key against the cache.
// This prevents re-rendering the already rendered messages

function flagMessages(inputs, oldMessages) {
  // inputs check
  if (inputs === undefined || oldMessages === undefined) {
    return null;
  }

  // All the messages of the linter are new, no need to diff
  // tag the messages for adding and save them to linter's cache
  if (!oldMessages.length) {
    // NOTE: No need to add .key here because normalizeMessages already does that
    return { oldKept: [], oldRemoved: [], newAdded: inputs };
  }

  // The linter has no messages anymore
  // tag all of its messages from cache for removal and empty the cache
  if (!inputs.length) {
    return { oldKept: [], oldRemoved: oldMessages, newAdded: [] };
  }

  // In all the other situations:
  // perform diff checking between the linter's new messages and its cache

  // create a map from keys to oldMessages
  var cache = createKeyMessageMap(oldMessages);

  // Find old kept and new added
  var newAdded = new Set();
  var oldKept = new Map();
  for (var iInput = 0, len = inputs.length; iInput < len; iInput++) {
    var input = inputs[iInput];
    if (cache.has(input.key)) {
      oldKept.set(input.key, input);
    } else {
      newAdded.add(input);
    }
  }

  // Find old removed
  var cacheKeys = Array.from(cache.keys());
  var oldKeptKeys = Array.from(oldKept.keys());

  var oldRemovedKeys = cacheKeys.filter(function (x) {
    return !oldKeptKeys.includes(x);
  });

  var oldRemoved = new Set();
  for (var iRemoved = 0, RemovedKeysLen = oldRemovedKeys.length; iRemoved < RemovedKeysLen; iRemoved++) {
    oldRemoved.add(cache.get(oldRemovedKeys[iRemoved]));
  }

  return {
    oldKept: Array.from(oldKept.values()),
    oldRemoved: oldRemoved ? Array.from(oldRemoved) : [],
    newAdded: Array.from(newAdded)
  };
}

// fast mergeArray function
// https://uilicious.com/blog/javascript-array-push-is-945x-faster-than-array-concat/

function mergeArray(arr1, arr2) {
  if (!arr2.length) {
    return;
  }
  Array.prototype.push.apply(arr1, arr2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FyY2hpZS8uYXRvbS9wYWNrYWdlcy9saW50ZXIvbGliL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OzswQkFFd0IsYUFBYTs7OztvQkFDSSxNQUFNOztBQUl4QyxJQUFNLFFBQVEsR0FBRyxzQkFBc0IsQ0FBQTs7QUFDdkMsSUFBTSxVQUFVLEdBQUcsd0JBQXdCLENBQUE7O0FBQzNDLElBQU0sY0FBYyxHQUFHLDZCQUE2QixDQUFBOztBQUNwRCxJQUFNLG9CQUFvQixHQUFHLG9DQUFvQyxDQUFBOzs7O0FBRWpFLFNBQVMsbUJBQW1CLENBQUMsTUFBYyxFQUFFLG9CQUE2QixFQUFFLE1BQXFCLEVBQVc7QUFDakgsTUFBSSxvQkFBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7QUFDakQsV0FBTyxLQUFLLENBQUE7R0FDYjtBQUNELFNBQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFTLEtBQUssRUFBRTtBQUNqQyxXQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0dBQzVDLENBQUMsQ0FBQTtDQUNIOztBQUVNLFNBQVMscUJBQXFCLENBQUMsVUFBc0IsRUFBaUI7QUFDM0UsU0FBTyw2QkFDTCxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsTUFBTSxFQUFFLE1BQU07V0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO0dBQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZILENBQUE7Q0FDRjs7QUFFRCxJQUFJLFNBQVMsWUFBQSxDQUFBOztBQUNOLFNBQVMsYUFBYSxDQUFDLFFBQWlCLEVBQUUsV0FBbUIsRUFBRSxVQUFtQixFQUFXO0FBQ2xHLE1BQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixXQUFPLElBQUksQ0FBQTtHQUNaOztBQUVELE1BQUksVUFB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QyxFQUFFLGNBQWMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsR0FBRyxjQUFjLEVBQUUsUUFBUSxFQUFFLEVBQUU7QUFDcEcsY0FBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDcEQ7O0FBRUQsU0FBTztBQUNMLFdBQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNyQyxjQUFVLEVBQUUsVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUNwRCxZQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7R0FDL0IsQ0FBQTtDQUNGOzs7OztBQUlNLFNBQVMsVUFBVSxDQUFDLElBQWdCLEVBQUUsSUFBZ0IsRUFBRTtBQUM3RCxNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNoQixXQUFNO0dBQ1A7QUFDRCxPQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO0NBQ3ZDIiwiZmlsZSI6Ii9ob21lL2FyY2hpZS8uYXRvbS9wYWNrYWdlcy9saW50ZXIvbGliL2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgYXJyYXlVbmlxdWUgZnJvbSAnbG9kYXNoL3VuaXEnXG5pbXBvcnQgeyBEaXNwb3NhYmxlLCBSYW5nZSwgUG9pbnQgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHR5cGUgeyBUZXh0RWRpdG9yIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB0eXBlIHsgTGludGVyLCBNZXNzYWdlIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGNvbnN0ICR2ZXJzaW9uID0gJ19fJHNiX2xpbnRlcl92ZXJzaW9uJ1xuZXhwb3J0IGNvbnN0ICRhY3RpdmF0ZWQgPSAnX18kc2JfbGludGVyX2FjdGl2YXRlZCdcbmV4cG9ydCBjb25zdCAkcmVxdWVzdExhdGVzdCA9ICdfXyRzYl9saW50ZXJfcmVxdWVzdF9sYXRlc3QnXG5leHBvcnQgY29uc3QgJHJlcXVlc3RMYXN0UmVjZWl2ZWQgPSAnX18kc2JfbGludGVyX3JlcXVlc3RfbGFzdF9yZWNlaXZlZCdcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFRyaWdnZXJMaW50ZXIobGludGVyOiBMaW50ZXIsIHdhc1RyaWdnZXJlZE9uQ2hhbmdlOiBib29sZWFuLCBzY29wZXM6IEFycmF5PHN0cmluZz4pOiBib29sZWFuIHtcbiAgaWYgKHdhc1RyaWdnZXJlZE9uQ2hhbmdlICYmICFsaW50ZXIubGludHNPbkNoYW5nZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiBzY29wZXMuc29tZShmdW5jdGlvbihzY29wZSkge1xuICAgIHJldHVybiBsaW50ZXIuZ3JhbW1hclNjb3Blcy5pbmNsdWRlcyhzY29wZSlcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVkaXRvckN1cnNvclNjb3Blcyh0ZXh0RWRpdG9yOiBUZXh0RWRpdG9yKTogQXJyYXk8c3RyaW5nPiB7XG4gIHJldHVybiBhcnJheVVuaXF1ZShcbiAgICB0ZXh0RWRpdG9yLmdldEN1cnNvcnMoKS5yZWR1Y2UoKHNjb3BlcywgY3Vyc29yKSA9PiBzY29wZXMuY29uY2F0KGN1cnNvci5nZXRTY29wZURlc2NyaXB0b3IoKS5nZXRTY29wZXNBcnJheSgpKSwgWycqJ10pLFxuICApXG59XG5cbmxldCBtaW5pbWF0Y2hcbmV4cG9ydCBmdW5jdGlvbiBpc1BhdGhJZ25vcmVkKGZpbGVQYXRoOiA/c3RyaW5nLCBpZ25vcmVkR2xvYjogc3RyaW5nLCBpZ25vcmVkVkNTOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIGlmICghZmlsZVBhdGgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKGlnbm9yZWRWQ1MpIHtcbiAgICBsZXQgcmVwb3NpdG9yeSA9IG51bGxcbiAgICBjb25zdCBwcm9qZWN0UGF0aHMgPSBhdG9tLnByb2plY3QuZ2V0UGF0aHMoKVxuICAgIGZvciAobGV0IGkgPSAwLCB7IGxlbmd0aCB9ID0gcHJvamVjdFBhdGhzOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IHByb2plY3RQYXRoID0gcHJvamVjdFBhdGhzW2ldXG4gICAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aCkgPT09IDApIHtcbiAgICAgICAgcmVwb3NpdG9yeSA9IGF0b20ucHJvamVjdC5nZXRSZXBvc2l0b3JpZXMoKVtpXVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVwb3NpdG9yeSAmJiByZXBvc2l0b3J5LmlzUGF0aElnbm9yZWQoZmlsZVBhdGgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICBjb25zdCBub3JtYWxpemVkRmlsZVBhdGggPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gZmlsZVBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpIDogZmlsZVBhdGhcbiAgaWYgKCFtaW5pbWF0Y2gpIHtcbiAgICBtaW5pbWF0Y2ggPSByZXF1aXJlKCdtaW5pbWF0Y2gnKVxuICB9XG4gIHJldHVybiBtaW5pbWF0Y2gobm9ybWFsaXplZEZpbGVQYXRoLCBpZ25vcmVkR2xvYilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmlwdGl2ZU9ic2VydmUob2JqZWN0OiBPYmplY3QsIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiBEaXNwb3NhYmxlIHtcbiAgbGV0IHN1YnNjcmlwdGlvbiA9IG51bGxcbiAgY29uc3QgZXZlbnRTdWJzY3JpcHRpb24gPSBvYmplY3Qub2JzZXJ2ZShldmVudE5hbWUsIGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKVxuICAgIH1cbiAgICBzdWJzY3JpcHRpb24gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHByb3BzKVxuICB9KVxuXG4gIHJldHVybiBuZXcgRGlzcG9zYWJsZShmdW5jdGlvbigpIHtcbiAgICBldmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKClcbiAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICBzdWJzY3JpcHRpb24uZGlzcG9zZSgpXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTWVzc2FnZUtleShtZXNzYWdlOiBNZXNzYWdlKSB7XG4gIGNvbnN0IHsgcmVmZXJlbmNlLCBsb2NhdGlvbiB9ID0gbWVzc2FnZVxuICBtZXNzYWdlLmtleSA9IFtcbiAgICBgJExJTlRFUjoke21lc3NhZ2UubGludGVyTmFtZX1gLFxuICAgIGAkTE9DQVRJT046JHtsb2NhdGlvbi5maWxlfSQke2xvY2F0aW9uLnBvc2l0aW9uLnN0YXJ0LnJvd30kJHtsb2NhdGlvbi5wb3NpdGlvbi5zdGFydC5jb2x1bW59JCR7XG4gICAgICBsb2NhdGlvbi5wb3NpdGlvbi5lbmQucm93XG4gICAgfSQke2xvY2F0aW9uLnBvc2l0aW9uLmVuZC5jb2x1bW59YCxcbiAgICByZWZlcmVuY2VcbiAgICAgID8gYCRSRUZFUkVOQ0U6JHtyZWZlcmVuY2UuZmlsZX0kJHtyZWZlcmVuY2UucG9zaXRpb24gPyBgJHtyZWZlcmVuY2UucG9zaXRpb24ucm93fSQke3JlZmVyZW5jZS5wb3NpdGlvbi5jb2x1bW59YCA6ICcnfWBcbiAgICAgIDogJyRSRUZFUkVOQ0U6bnVsbCcsXG4gICAgYCRFWENFUlBUOiR7bWVzc2FnZS5leGNlcnB0fWAsXG4gICAgYCRTRVZFUklUWToke21lc3NhZ2Uuc2V2ZXJpdHl9YCxcbiAgICBtZXNzYWdlLmljb24gPyBgJElDT046JHttZXNzYWdlLmljb259YCA6ICckSUNPTjpudWxsJyxcbiAgICBtZXNzYWdlLnVybCA/IGAkVVJMOiR7bWVzc2FnZS51cmx9YCA6ICckVVJMOm51bGwnLFxuICAgIHR5cGVvZiBtZXNzYWdlLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyA/IGAkREVTQ1JJUFRJT046JHttZXNzYWdlLmRlc2NyaXB0aW9ufWAgOiAnJERFU0NSSVBUSU9OOm51bGwnLFxuICBdLmpvaW4oJycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVNZXNzYWdlcyhsaW50ZXJOYW1lOiBzdHJpbmcsIG1lc3NhZ2VzOiBBcnJheTxNZXNzYWdlPikge1xuICBmb3IgKGxldCBpID0gMCwgeyBsZW5ndGggfSA9IG1lc3NhZ2VzOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZXNbaV1cbiAgICBjb25zdCB7IHJlZmVyZW5jZSB9ID0gbWVzc2FnZVxuICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UubG9jYXRpb24ucG9zaXRpb24pKSB7XG4gICAgICBtZXNzYWdlLmxvY2F0aW9uLnBvc2l0aW9uID0gUmFuZ2UuZnJvbU9iamVjdChtZXNzYWdlLmxvY2F0aW9uLnBvc2l0aW9uKVxuICAgIH1cbiAgICBpZiAocmVmZXJlbmNlICYmIEFycmF5LmlzQXJyYXkocmVmZXJlbmNlLnBvc2l0aW9uKSkge1xuICAgICAgcmVmZXJlbmNlLnBvc2l0aW9uID0gUG9pbnQuZnJvbU9iamVjdChyZWZlcmVuY2UucG9zaXRpb24pXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNvbHV0aW9ucyAmJiBtZXNzYWdlLnNvbHV0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGogPSAwLCBfbGVuZ3RoID0gbWVzc2FnZS5zb2x1dGlvbnMubGVuZ3RoLCBzb2x1dGlvbjsgaiA8IF9sZW5ndGg7IGorKykge1xuICAgICAgICBzb2x1dGlvbiA9IG1lc3NhZ2Uuc29sdXRpb25zW2pdXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvbHV0aW9uLnBvc2l0aW9uKSkge1xuICAgICAgICAgIHNvbHV0aW9uLnBvc2l0aW9uID0gUmFuZ2UuZnJvbU9iamVjdChzb2x1dGlvbi5wb3NpdGlvbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtZXNzYWdlLnZlcnNpb24gPSAyXG4gICAgaWYgKCFtZXNzYWdlLmxpbnRlck5hbWUpIHtcbiAgICAgIG1lc3NhZ2UubGludGVyTmFtZSA9IGxpbnRlck5hbWVcbiAgICB9XG4gICAgdXBkYXRlTWVzc2FnZUtleShtZXNzYWdlKVxuICB9XG59XG5cbi8vIHVwZGF0ZSB0aGUga2V5IG9mIHRoZSBnaXZlbiBtZXNzYWdlc1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUtleXMobWVzc2FnZXM6IEFycmF5PE1lc3NhZ2U+KSB7XG4gIG1lc3NhZ2VzLmZvckVhY2gobSA9PiB7XG4gICAgdXBkYXRlTWVzc2FnZUtleShtKVxuICB9KVxufVxuXG4vLyBjcmVhdGUgYSBtYXAgZnJvbSBrZXlzIHRvIG1lc3NhZ2VzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlS2V5TWVzc2FnZU1hcChtZXNzYWdlczogQXJyYXk8TWVzc2FnZT4pOiBNYXA8c3RyaW5nLCBNZXNzYWdlPiB7XG4gIGNvbnN0IGtleU1lc3NhZ2VNYXAgPSBuZXcgTWFwKClcbiAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBtZXNzYWdlczsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldXG4gICAga2V5TWVzc2FnZU1hcC5zZXQobWVzc2FnZS5rZXksIG1lc3NhZ2UpXG4gIH1cbiAgcmV0dXJuIGtleU1lc3NhZ2VNYXBcbn1cblxuaW50ZXJmYWNlIEZsYWdnZWRNZXNzYWdlcyB7XG4gIG9sZEtlcHQ6IEFycmF5PE1lc3NhZ2U+O1xuICBvbGRSZW1vdmVkOiBBcnJheTxNZXNzYWdlPjtcbiAgbmV3QWRkZWQ6IEFycmF5PE1lc3NhZ2U+O1xufVxuXG4vLyBUaGlzIGZhc3QgZnVuY3Rpb24gcmV0dXJucyB0aGUgbmV3IG1lc3NhZ2VzIGFuZCBvbGQgbWVzc2FnZXMgYnkgY29tcGFyaW5nIHRoZWlyIGtleSBhZ2FpbnN0IHRoZSBjYWNoZS5cbi8vIFRoaXMgcHJldmVudHMgcmUtcmVuZGVyaW5nIHRoZSBhbHJlYWR5IHJlbmRlcmVkIG1lc3NhZ2VzXG5leHBvcnQgZnVuY3Rpb24gZmxhZ01lc3NhZ2VzKGlucHV0czogQXJyYXk8TWVzc2FnZT4sIG9sZE1lc3NhZ2VzOiBBcnJheTxNZXNzYWdlPik6IEZsYWdnZWRNZXNzYWdlcyB8IG51bGwge1xuICAvLyBpbnB1dHMgY2hlY2tcbiAgaWYgKGlucHV0cyA9PT0gdW5kZWZpbmVkIHx8IG9sZE1lc3NhZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gQWxsIHRoZSBtZXNzYWdlcyBvZiB0aGUgbGludGVyIGFyZSBuZXcsIG5vIG5lZWQgdG8gZGlmZlxuICAvLyB0YWcgdGhlIG1lc3NhZ2VzIGZvciBhZGRpbmcgYW5kIHNhdmUgdGhlbSB0byBsaW50ZXIncyBjYWNoZVxuICBpZiAoIW9sZE1lc3NhZ2VzLmxlbmd0aCkge1xuICAgIC8vIE5PVEU6IE5vIG5lZWQgdG8gYWRkIC5rZXkgaGVyZSBiZWNhdXNlIG5vcm1hbGl6ZU1lc3NhZ2VzIGFscmVhZHkgZG9lcyB0aGF0XG4gICAgcmV0dXJuIHsgb2xkS2VwdDogW10sIG9sZFJlbW92ZWQ6IFtdLCBuZXdBZGRlZDogaW5wdXRzIH1cbiAgfVxuXG4gIC8vIFRoZSBsaW50ZXIgaGFzIG5vIG1lc3NhZ2VzIGFueW1vcmVcbiAgLy8gdGFnIGFsbCBvZiBpdHMgbWVzc2FnZXMgZnJvbSBjYWNoZSBmb3IgcmVtb3ZhbCBhbmQgZW1wdHkgdGhlIGNhY2hlXG4gIGlmICghaW5wdXRzLmxlbmd0aCkge1xuICAgIHJldHVybiB7IG9sZEtlcHQ6IFtdLCBvbGRSZW1vdmVkOiBvbGRNZXNzYWdlcywgbmV3QWRkZWQ6IFtdIH1cbiAgfVxuXG4gIC8vIEluIGFsbCB0aGUgb3RoZXIgc2l0dWF0aW9uczpcbiAgLy8gcGVyZm9ybSBkaWZmIGNoZWNraW5nIGJldHdlZW4gdGhlIGxpbnRlcidzIG5ldyBtZXNzYWdlcyBhbmQgaXRzIGNhY2hlXG5cbiAgLy8gY3JlYXRlIGEgbWFwIGZyb20ga2V5cyB0byBvbGRNZXNzYWdlc1xuICBjb25zdCBjYWNoZSA9IGNyZWF0ZUtleU1lc3NhZ2VNYXAob2xkTWVzc2FnZXMpXG5cbiAgLy8gRmluZCBvbGQga2VwdCBhbmQgbmV3IGFkZGVkXG4gIGNvbnN0IG5ld0FkZGVkOiBTZXQ8TWVzc2FnZT4gPSBuZXcgU2V0KClcbiAgY29uc3Qgb2xkS2VwdDogTWFwPHN0cmluZywgTWVzc2FnZT4gPSBuZXcgTWFwKClcbiAgZm9yIChsZXQgaUlucHV0ID0gMCwgbGVuID0gaW5wdXRzLmxlbmd0aDsgaUlucHV0IDwgbGVuOyBpSW5wdXQrKykge1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRzW2lJbnB1dF1cbiAgICBpZiAoY2FjaGUuaGFzKGlucHV0LmtleSkpIHtcbiAgICAgIG9sZEtlcHQuc2V0KGlucHV0LmtleSwgaW5wdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0FkZGVkLmFkZChpbnB1dClcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIG9sZCByZW1vdmVkXG4gIGNvbnN0IGNhY2hlS2V5cyA9IEFycmF5LmZyb20oY2FjaGUua2V5cygpKVxuICBjb25zdCBvbGRLZXB0S2V5cyA9IEFycmF5LmZyb20ob2xkS2VwdC5rZXlzKCkpXG5cbiAgY29uc3Qgb2xkUmVtb3ZlZEtleXMgPSBjYWNoZUtleXMuZmlsdGVyKHggPT4gIW9sZEtlcHRLZXlzLmluY2x1ZGVzKHgpKVxuXG4gIGNvbnN0IG9sZFJlbW92ZWQgPSBuZXcgU2V0KClcbiAgZm9yIChsZXQgaVJlbW92ZWQgPSAwLCBSZW1vdmVkS2V5c0xlbiA9IG9sZFJlbW92ZWRLZXlzLmxlbmd0aDsgaVJlbW92ZWQgPCBSZW1vdmVkS2V5c0xlbjsgaVJlbW92ZWQrKykge1xuICAgIG9sZFJlbW92ZWQuYWRkKGNhY2hlLmdldChvbGRSZW1vdmVkS2V5c1tpUmVtb3ZlZF0pKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbGRLZXB0OiBBcnJheS5mcm9tKG9sZEtlcHQudmFsdWVzKCkpLFxuICAgIG9sZFJlbW92ZWQ6IG9sZFJlbW92ZWQgPyBBcnJheS5mcm9tKG9sZFJlbW92ZWQpIDogW10sXG4gICAgbmV3QWRkZWQ6IEFycmF5LmZyb20obmV3QWRkZWQpLFxuICB9XG59XG5cbi8vIGZhc3QgbWVyZ2VBcnJheSBmdW5jdGlvblxuLy8gaHR0cHM6Ly91aWxpY2lvdXMuY29tL2Jsb2cvamF2YXNjcmlwdC1hcnJheS1wdXNoLWlzLTk0NXgtZmFzdGVyLXRoYW4tYXJyYXktY29uY2F0L1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQXJyYXkoYXJyMTogQXJyYXk8YW55PiwgYXJyMjogQXJyYXk8YW55Pikge1xuICBpZiAoIWFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJyMSwgYXJyMilcbn1cbiJdfQ==