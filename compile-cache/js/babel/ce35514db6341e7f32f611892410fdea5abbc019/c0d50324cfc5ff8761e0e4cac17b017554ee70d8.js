function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _jasmineFix = require("jasmine-fix");

var _libRegistry = require("../lib/registry");

var _libRegistry2 = _interopRequireDefault(_libRegistry);

describe("Registry", function () {
  var registry = undefined;

  beforeEach(function () {
    registry = new _libRegistry2["default"]();
  });
  afterEach(function () {
    registry.dispose();
  });

  function validateTiles(actual, expected) {
    expect(actual.length).toBe(expected.length);

    actual.forEach(function (entry, index) {
      expect(entry.title).toBe(expected[index]);
    });
  }
  function validateOldTiles(oldTitles, titles) {
    expect(oldTitles.length).toBe(titles.length);

    titles.forEach(function (title, index) {
      expect(oldTitles[index].title).toBe(title);
      expect(oldTitles[index].duration === "1ms" || oldTitles[index].duration === "0ms").toBe(true);
    });
  }

  describe("handling of providers", function () {
    (0, _jasmineFix.it)("registers providers properly and clears them out when they die", function () {
      var provider = registry.create();
      expect(registry.providers.has(provider)).toBe(true);
      provider.dispose();
      expect(registry.providers.has(provider)).toBe(false);
    });
    (0, _jasmineFix.it)("emits update event properly", function () {
      var provider = registry.create();
      var update = jasmine.createSpy("update");
      registry.onDidUpdate(update);
      expect(update).not.toHaveBeenCalled();
      provider.add("Hey");
      provider.remove("Hey");
      provider.clear();
      expect(update).toHaveBeenCalled();
      expect(update.calls.length).toBe(2);
    });
    (0, _jasmineFix.it)("adds and returns sorted titles", _asyncToGenerator(function* () {
      var provider = registry.create();
      provider.add("Hey");
      yield (0, _jasmineFix.wait)(1);
      provider.add("Wow");
      yield (0, _jasmineFix.wait)(1);
      provider.add("Hello");
      validateTiles(registry.getTilesActive(), ["Hello", "Wow", "Hey"]);
    }));
    (0, _jasmineFix.it)("adds removed ones to history", _asyncToGenerator(function* () {
      var provider = registry.create();
      provider.add("Boy");
      yield (0, _jasmineFix.wait)(1);
      provider.add("Hey");
      validateTiles(registry.getTilesActive(), ["Hey", "Boy"]);
      expect(registry.getTilesOld()).toEqual([]);

      provider.remove("Hey");
      validateTiles(registry.getTilesActive(), ["Boy"]);
      validateOldTiles(registry.getTilesOld(), ["Hey"]);
    }));
    (0, _jasmineFix.it)("adds cleared ones to history", function () {
      var provider = registry.create();
      provider.add("Hello");
      provider.add("World");

      validateTiles(registry.getTilesActive(), ["Hello", "World"]);
      expect(registry.getTilesOld()).toEqual([]);

      provider.clear();
      validateTiles(registry.getTilesActive(), []);
      validateOldTiles(registry.getTilesOld(), ["Hello", "World"]);
    });
  });
  describe("getTilesOld", function () {
    (0, _jasmineFix.it)("excludes active ones from history", function () {
      var provider = registry.create();
      provider.add("Yo CJ");
      provider.add("Murica");
      provider.remove("Yo CJ");
      provider.remove("Murica");
      provider.add("Yo CJ");

      validateOldTiles(registry.getTilesOld(), ["Murica"]);
    });
    (0, _jasmineFix.it)("excludes duplicates and only returns the last one", function () {
      var provider = registry.create();

      provider.add("Some");
      provider.add("Things");
      provider.remove("Some");
      provider.remove("Things");
      provider.add("Some");
      provider.remove("Some");

      validateOldTiles(registry.getTilesOld(), ["Things", "Some"]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,